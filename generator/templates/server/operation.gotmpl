// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command by operation

import (
  "encoding/json"
  "fmt"
  "net/http"
  "sync"

  "github.com/go-faker/faker/v4"
  "github.com/gin-gonic/gin"
  "github.com/go-openapi/errors"

  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

{{- $structName := (pascalize .Name) }}
{{- $sr := .SuccessResponse }}
{{- if not $sr }}
    {{- $sr = index .Responses 0}}
{{- end }}
{{- $srStruct := pascalize $sr.Name }}

var (
    once{{ $structName }} = &sync.Once{}
    fake{{ $srStruct }} {{ $srStruct }}
)

func {{ $structName }}FakeHandler(c *gin.Context) {
    params := New{{ $structName }}Params()
    if err0 := params.BindRequest(c); err0 != nil {
        err, _ := err0.(*errors.CompositeError)
        marshalled, _ := err.MarshalJSON()
        c.JSON(int(err.Code()), marshalled)
        return
    }

    p, _ := json.Marshal(params)
    fmt.Printf("fakehandler_req: %s\n", string(p))

    res := generate{{ $structName }}FakeData()
    types.GenerateFakeResponse(c, {{ $sr.Code }}, res)
}

func generate{{ $structName }}FakeData() {{ $srStruct }} {
    once{{ $structName }}.Do(func() {
        temp := {{ $srStruct }}{}
        err := faker.FakeData(&temp)
        if err != nil {
            fmt.Printf("error when generating fake data: %s\n", err.Error())
        }
        fake{{ $srStruct }} = temp
    })

    return fake{{ $srStruct }}
}


{{ range .ExtraSchemas }}
// {{ .Name }} {{ template "docstring" . }}
//
// swagger:model {{ .Name }}
  {{- template "schema" . }}
{{- end }}
